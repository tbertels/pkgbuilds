# https://aur.archlinux.org/packages/fx_cast
groups=('modified')

## WIP

pkgname=fx_cast
pkgver=0.3.0
pkgrel=1
_nodeversion=16
pkgdesc="Implementation of the Google Cast Chrome Sender SDK within Firefox "
arch=('x86_64')
url="https://hensm.github.io/fx_cast/"
license=('MIT')
makedepends=('jq' 'nvm' 'python' 'setconf')
depends=('nodejs' 'avahi')
install="$pkgname.install"
source=("$pkgname-$pkgver.tar.gz::https://github.com/hensm/fx_cast/archive/v$pkgver.tar.gz")
sha256sums=('82eab7d4d9b1a0485d54d79eb98caa75fc456f22d25337bf19a0b413b18a9e67')

_ensure_local_nvm() {
  # let's be sure we are starting clean
  which nvm >/dev/null 2>&1 && nvm deactivate && nvm unload
  export NVM_DIR="$srcdir/.nvm"

  # The init script returns 3 if version specified
  # in ./.nvrc is not (yet) installed in $NVM_DIR
  # but nvm itself still gets loaded ok
  source /usr/share/nvm/init-nvm.sh || [[ $? != 1 ]]
}

prepare() {
  cd "$pkgname-$pkgver"
  _ensure_local_nvm
  nvm install "${_nodeversion}"

#  sed -i 's/`node.*`/"host"/' app/bin/build.js
}

build() {
  cd "$pkgname-$pkgver"
  _ensure_local_nvm
  npm install --cache "$srcdir/npm-cache"
  npm run build

  sed -i 's#"path":.*$#"path": "/usr/lib/node_modules/fx_cast/fx_cast_bridge.sh"#' \
    "dist/app/${pkgname}_bridge.json"

  setconf "dist/app/${pkgname}_bridge.sh" NODE_PATH \
    '"/usr/lib/node_modules/fx_cast/node_modules" node $(dirname $0)/src/main.js --__name $(basename $0) "$@"'
}

package() {
  cd "$pkgname-$pkgver"
  install -Dm755 "dist/app/${pkgname}_bridge.sh" -t "$pkgdir/usr/lib/node_modules/$pkgname/"
  install -Dm644 dist/app/config.json -t "$pkgdir/usr/lib/node_modules/$pkgname/"
  cp -r dist/app/src "$pkgdir/usr/lib/node_modules/$pkgname/"
  cp -r app/node_modules "$pkgdir/usr/lib/node_modules/$pkgname/"

  install -Dm644 "dist/app/${pkgname}_bridge.json" -t \
    "$pkgdir/usr/lib/mozilla/native-messaging-hosts/"

  # Remove references to $pkgdir
  find "$pkgdir" -type f -name package.json -print0 | xargs -0 sed -i "/_where/d"

  # Remove references to $srcdir
#  local tmppackage="$(mktemp)"
#  local pkgjson="$pkgdir/usr/lib/node_modules/$pkgname/package.json"
#  jq '.|=with_entries(select(.key|test("_.+")|not))' "$pkgjson" > "$tmppackage"
#  mv "$tmppackage" "$pkgjson"
#  chmod 644 "$pkgjson"

  install -Dm644 LICENSE -t "$pkgdir/usr/share/licenses/${pkgname}/"
}
