# https://aur.archlinux.org/packages/marktext
groups=('modified')

pkgname=marktext
pkgver=0.16.3
pkgrel=2
pkgdesc="A simple and elegant open-source markdown editor that focused on speed and usability"
arch=('x86_64')
url="https://marktext.app"
license=('MIT')
depends=('electron11' 'fontconfig' 'libxkbfile' 'libsecret' 'ripgrep')
makedepends=('clang' 'moreutils' 'npm' 'nvm' 'yarn' 'yq')
source=("$pkgname-$pkgver.tar.gz::https://github.com/marktext/marktext/archive/v$pkgver.tar.gz"
        "$pkgname.sh"
        "$pkgname-arg-handling.patch")
sha256sums=('ab7702558a09f9be5326a03ad56249378fad67138dd21261458b60d4b37191ce'
            'dbdef34bdcb3b92dfe77ad79b427ac590f4e1ba0a3bafd718efd8051d3b8c5da'
            'c754a1cad52d10a38eeddb9293ce0a4540296c6adbb47eb5311eaaeded150a01')

_ensure_local_nvm() {
    # lets be sure we are starting clean
    which nvm >/dev/null 2>&1 && nvm deactivate && nvm unload
    export NVM_DIR="$srcdir/.nvm"

    # The init script returns 3 if version
    # specified in ./.nvrc is not (yet) installed in $NVM_DIR
    # but nvm itself still gets loaded ok
    source /usr/share/nvm/init-nvm.sh || [[ $? != 1 ]]
}

prepare() {
    local electronDist=$(dirname $(realpath $(which electron11)))
    local electronVersion=$(electron11 --version | sed -e 's/^v//')

    # Use Node.js v12
    export npm_config_cache="$srcdir/npm_cache"
    local nodeversion='12.22.1'
    local npm_prefix=$(npm config get prefix)
    npm config delete prefix
    _ensure_local_nvm
    nvm install "$nodeversion" && nvm use "$nodeversion"

    cd "$pkgname-$pkgver"
    jq 'del(.devDependencies["electron"], .scripts["preinstall", "postinstall"])' \
        package.json | sponge package.json
    yq -y ". + {\"electronDist\": \"$electronDist\", \"electronVersion\": \"$electronVersion\"}" \
        electron-builder.yml | sponge electron-builder.yml

    export YARN_CACHE_FOLDER="$srcdir/node_modules"
    yarn install --check-files --frozen-lockfile
    yarn add -D --no-lockfile --ignore-scripts electron@$electronVersion
    patch -p1 < "$srcdir/$pkgname-arg-handling.patch"
}

build() {
    export CC=clang
    export CXX=clang++
    export npm_config_clang=1
    export MARKTEXT_IS_STABLE=1
    export MARKTEXT_EXIT_ON_ERROR=1
#    export ELECTRON_SKIP_BINARY_DOWNLOAD=1
    _ensure_local_nvm

    cd "$pkgname-$pkgver"
    yarn run electron-rebuild
    node .electron-vue/build.js
    yarn run electron-builder --linux --x64 --dir
}

check() {
    cd "$pkgname-$pkgver"

    # Unit and e2e tests
    yarn run test

    # Restore node config from nvm
    npm config set prefix "$npm_prefix"
    nvm unalias default
}

package() {
    cd "$pkgname-$pkgver"
    local dist=build/linux-unpacked/resources
    local rg_path="$pkgdir/usr/lib/marktext/app.asar.unpacked/node_modules/vscode-ripgrep/bin/"

    install -Dm755 "../$pkgname.sh" "$pkgdir/usr/bin/$pkgname"
    install -Dm644 -t "$pkgdir/usr/lib/$pkgname/" "$dist/app.asar"
    cp -a "$dist"/{app.asar.unpacked,hunspell_dictionaries} "$pkgdir/usr/lib/$pkgname/"
    mkdir -p $rg_path
    ln -sf /usr/bin/rg "$rg_path"
    install -Dm755 -t "${pkgdir}/usr/share/applications/" "resources/linux/$pkgname.desktop"
    install -Dm755 -t "${pkgdir}/usr/share/metainfo/" "resources/linux/$pkgname.appdata.xml"
    install -Dm644 resources/icons/icon.png "${pkgdir}/usr/share/pixmaps/$pkgname.png"
    install -Dm644 -t "$pkgdir/usr/share/licenses/$pkgname/" LICENSE
    install -Dm644 -t "$pkgdir/usr/share/doc/$pkgname/" README.md CONTRIBUTING.md
    cp -a docs "$pkgdir/usr/share/doc/$pkgname/"

    cd "resources/icons"
    find -name "$pkgname.png" -exec install -Dm644 {} "$pkgdir/usr/share/icons/hicolor/{}" \;
}
